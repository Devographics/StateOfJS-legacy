share: Share
average: Average
conclusion: Conclusion
tools_salary_range_average: Average salary
tools_company_size_average: Average company size
tools_years_of_experience_average: Average years of experience
users_percentage: percentage of users
salary_range_axis_legend: salary range
years_of_experience_axis_legend: years of experience
company_size_axis_legend: number of employees
percents_display_mode: Percents
counts_display_mode: Counts
awards_runner_ups: Runner-Ups

nav:
    introduction: Introduction
    connections: Connections
    overview: Overview
    other-libraries: Other Libraries
    conclusion: Conclusion
    other-tools: Other Tools
    opinions: Opinions
    demographics: Demographics
    support_us: Support Us
    awards: Awards 🏆

    javascript-flavors: JavaScript Flavors
    front-end-frameworks: Front-end Frameworks
    data-layer: Data Layer
    back-end-frameworks: Back-end Frameworks
    testing: Testing
    mobile-and-desktop: Mobile & Desktop

tools:
    angular: Angular
    native-apps: Native Apps
    graphql: GraphQL
    es6: ES6
    phonegap-cordova: Cordova
    storybook: Storybook
    apollo: Apollo
    purescript: PureScript
    coffeescript: CoffeeScript
    dart: Dart
    kotlin: Kotlin
    scala: Scala
    vanilla-js: Vanilla JS
    haxe: Haxe
    knockout: Knockout
    Knockout: Knockout
    dojo: Dojo
    web-components: Web Components
    reagent: Reagent
    canjs: CanJS
    extjs: Ext JS
    web-assembly: WebAssembly
    glimmer: glimmer
    ember-data: ember-data
    mongodb: MongoDB
    firebase: Firebase 
    ngrx: ngrx
    dotnet: .NET
    rails: Rails
    php: PHP
    python: Python
    laravel: Laravel
    ruby: Ruby
    elixir: Elixir
    django: Django
    golang: Go
    C#: C#
    java: Java
    rust: Rust
    haskell: Haskell
    selenium: Selenium
    sinon: Sinon.js
    cucumberjs: CucumberJS
    tap: tap
    elm-test: elm-test
    flutter: Flutter
    pwa: Progressive Web Apps
    weex: weex
    xamarin: xamarin
    appcelerator: Appcelerator
    quasar: Quasar
    expo: Expo
    nwjs: NW.js
    c-cplusplus: C/C++
    swift: Swift
    objective-c: Objective-C
    ocaml: OCaml
    webgl: WebGL
    service-workers: Service Workers
    webrtc: WebRTC
    webvr: WebVR
    web-animations-api: Web Animations API
    web-audio-api: Web Audio API
    web-speech-api: Web Speech API
    parcel: Parcel
    make: Make
    lodash: lodash
    moment: moment
    underscore: underscore
    date-fns: Date-fns
    ramda: Ramda
    luxon: luxon
    visual-studio: VS Code
    sublime-text: Sublime Text
    webstorm: WebStorm
    atom: Atom
    emacs: emacs
    intellij: IntelliJ
    phpstorm: PhpStorm
    notepad++: notepad++
    brackets: Brackets
    nano: nano
    pycharm: PyCharm
    vim: Vim

tools_descriptions:
    angular: >
        Angular is a TypeScript-based open-source front-end web application platform. Note that from
        this year on we are not making a distinction between Angular and AngularJS anymore, while datapoints for 
        2016 and 2017 correspond to Angular (a.k.a. "Angular 2").
    es6: >
        ES6 and its descendants are the newer versions of JavaScript, usually run through Babel.
    apollo: >
        A fully-featured, production ready caching GraphQL client for every UI framework and GraphQL server.
    native-apps: >
        The majority of mobile and desktop apps are still built with native languages like Java, Kotlin, Objective-C, or Swift.
    phonegap-cordova: >
        Apache Cordova is a mobile application development framework.
    storybook: >
        The UI Development Environment you'll ♥️ to use.

opinions:
    legends:
        never_heard: I've never heard of it
        not_interested: I've HEARD of it, and am NOT interested
        interested: I've HEARD of it, and WOULD like to learn it
        would_use: I've USED it before, and WOULD use it again
        would_not_use: I've USED it before, and would NOT use it again
    legends_short:
        never_heard: Never heard of it
        not_interested: Heard of it, not interested
        interested: Heard of it, would like to learn
        would_use: Used it, would use again
        would_not_use: Used it, would not use again

reasons:
    elegant_programming_style_patterns:
        long: ⚙️ Elegant programming style & patterns
        short: ⚙️ Programming style
    robust_less_error_prone_code:
        long: 🐞 Robust, less error-prone code
        short: 🐞 Robust code
    rich_package_ecosystem:
        long: 🎁 Rich package ecosystem
        short: 🎁 Package ecosystem
    fast_performance:
        long: ⚡ Fast performance
        short: ⚡ Fast performance
    well_established_option:
        long: 🏛️ Well-established option
        short: 🏛️ Well-established
    easy_learning_curve:
        long: 👶 Easy learning curve
        short: 👶 Easy to learn
    powerful_developer_tooling:
        long: 🔧 Powerful developer tooling
        short: 🔧 Tooling
    good_documentation:
        long: 📖 Good documentation
        short: 📖 Documentation
    backed_by_a_great_team_company:
        long: 👫 Backed by a great team/company
        short: 👫 Team/company
    simple_lightweight:
        long: 🎈 Simple & lightweight
        short: 🎈 Lightweight
    growing_momentum_popularity:
        long: 📉 Growing momentum/popularity
        short: 📉 Momentum
    full_featured_powerful:
        long: 🕹️ Full-featured & powerful
        short: 🕹️ Full-featured
    stable_backwards_compatible:
        long: ⚖️ Stable & backwards-compatible
        short: ⚖️ Stability
    clumsy_programming_style:
        long: ⚙️ Clumsy programming style
        short: ⚙️ Clumsy
    buggy_error_prone_code:
        long: 🐞 Buggy, error-prone code
        short: 🐞 Buggy code
    poor_performance:
        long: ⚡ Poor performance
        short: ⚡ Poor performance
    small_package_ecosystem:
        long: 🎁 Small package ecosystem
        short: 🎁 Few packages
    new_untested_option:
        long: 🏛️ New untested option
        short: 🏛️ New & untested
    hard_learning_curve:
        long: 👶 Hard learning curve
        short: 👶 Hard to learn
    lacking_developer_tooling:
        long: 🔧 Lacking developer tooling
        short: 🔧 Lacking tooling
    bad_documentation:
        long: 📖 Bad documentation
        short: 📖 Bad documentation
    concerns_about_the_team_company:
        long: 👫 Concerns about the team/company
        short: 👫 Bad team/company
    bloated_complex:
        long: 🎈 Bloated & complex
        short: 🎈 Bloated & complex
    diminishing_momentum_popularity:
        long: 📉 Diminishing momentum/popularity
        short: 📉 Low momentum
    limited_lacking_in_features:
        long: 🕹️ Limited & lacking in features
        short: 🕹️ Limited
    fast_changing_breaks_often:
        long: ⚖️ Fast-changing & breaks often
        short: ⚖️ Fast-changing
    other:
        long: Other
        short: Other

charts:
    overview: Overall Results
    overview_description: Per-library survey results.
    happiness: Overall Happiness
    other-tools: Other Libraries
    all-libraries: All Libraries
    quadrants: Quadrant Chart
    results-over-time: ${tool}'s Popularity Over Time
    likes: Most Liked Aspects of ${tool}
    dislikes: Most Disliked Aspects of ${tool}
    tool-usage-by-country: ${tool} Usage by Country
    other-languages: Other Languages
    browser-apis: Browser APIs
    build-tools: Build Tools
    utility-libraries: Utility Libraries
    text-editors: Text Editors
    countries: Responses per Country
    gender-breakdown: Gender Breakdown
    salaries: Salaries
    salaries-map: Salaries per Country
    experience: Experience
    company-size: Company Size
    participation-by-country: Participation by Country
    salary-per-country: Average Salary per Country
    opinion-js_moving_in_right_direction: JavaScript is moving in the right direction
    opinion-building_js_apps_overly_complex: Building JavaScript apps is overly complex right now
    opinion-js_over_used_online: JavaScript is over-used online
    opinion-enjoy_building_js_apps: I enjoy building JavaScript apps
    opinion-would_like_js_to_be_main_lang: I would like JavaScript to be my main programming language
    opinion-js_ecosystem_changing_to_fast: The JavaScript ecosystem is changing too fast
    opinion-survey_too_long: This survey is too damn long!
    tool-pairing: Which Tools Are Used Alongside ${tool}?
    highest-satisfaction: With a 96.6% satisfaction ratio, Jest was the most liked technology this year
    highest-interest: Find out which technology had the highest satisfaction ratio in 2018
    tools-salary-range: Salary Breakdown
    tools-company-size: Company Size Breakdown
    tools-years-of-experience: Years Of Experience Breakdown
    connections: Connections Between Technologies
    other_languages: Other Languages
    browser_apis: Browser APIs
    build_tools: Build Tools
    utility_libraries: Utility Libraries
    text_editors: Text Editors
    years-of-experience: Years of Experience

charts_descriptions: 
    overview: >
        Overall ${sectionName} results.
    happiness: >
        On a scale of one (very unhappy) to five (very happy), how happy are developers
        with the current overall state of this category?
    tools-salary-range: >
        Salary breakdown for developers who picked “used it, would use again” for a given option. 
        
        
        Each cell shows the percentage of users in a given salary range,
        darker means higher usage.
    tools-company-size: >
        Company size breakdown for developers who picked “used it, would use again” for a given option.  
        

        Each cell shows the percentage of users in a given company size range,
        darker means higher usage.
    tools-years-of-experience: >
        Years of experience breakdown for developers who picked “used it, would use again” for a given option. 


        Each cell shows the percentage of users in a given years of experience range,
        darker means higher usage.

    likes: >
        Most liked aspects of ${tool} among developers who picked “used it and would use again”.
    
    dislikes: >
        Most disliked aspects of ${tool} among developers who picked “used it and would *not* use again”.
    
    tool-pairing : >
        Libraries most likely to be used by developers who picked “used it and would use again” for ${tool}. 
        Darker color means a stronger correlation. 

    quadrants: >
        This chart shows each technology’s **satisfaction ratio** over its **total usage**.


        Additionally, technologies that have an **interest ratio** 
        (percentage of non-users interested in learning it) over 50% are displayed as “on fire”.
    
    tool-usage-by-country: >

        On average, **${percentage}%** of respondents have used **${tool}** and 
        would be happy to use it again.
        
        
        Countries where this ratio is higher are shown in red, those where it's lower
        are displayed in blue (countries with fewer than 20 total survey respondents are
        omitted).
    other-tools: >
        Other answers mentioned by survey respondents, ranked by mention count.
        
fullcharts:
    overview: ${sectionName} Overall Results
    other-tools: Other ${sectionName} Answers
    tools-salary-range: ${sectionName} Salary Breakdown
    tools-company-size: ${sectionName} Company Size Breakdown
    tools-years-of-experience: ${sectionName} Years Of Experience Breakdown
    happiness: ${sectionName} Overall Happiness
    quadrants: ${sectionName} Quadrant Chart

shortnames:
    introduction: Intro
    javascript-flavors: Flavors
    front-end-frameworks: Front-end
    data-layer: Data Layer
    back-end-frameworks: Back-end
    testing: Testing
    mobile-and-desktop: Mobile & Desktop
    opinions: Opinions
    demographics: Demographics
    conclusion: Conclusion
    other-libraries: Other

symbols:
    javascript-flavors: Fv
    front-end-frameworks: Fe
    data-layer: Dl
    back-end-frameworks: Be
    testing: Te
    mobile-and-desktop: Mb
    opinions: Op
    demographics: Dm
    conclusion: Cn

intros:
    javascript-flavors: >
        As JavaScript matures, developers are starting to look
        beyond its borders and create various languages and dialects that
        compile to JavaScript. 
    front-end-frameworks: >
        The front-end remains the key battleground for JavaScript. But now
        that the dust has cleared, it's starting to look like only two
        combatants are left standing…
    data-layer: >
        The data layer regroups all the technologies used to transmit and manage data. 
        It's a vast category where many approaches compete to make a tricky problem more
        approachable.
    back-end-frameworks: >
        JavaScript on the back-end hasn't seen any major breakthroughs in recent years. 
        But compared to the rest of the ecosystem's frenetic pace,
        many will say that this is a blessing, not a curse. 
    testing: >
        Testing, testing… Is this thing on? Sorry, I Jest, but I would never want to make a Mocha-ry 
        of this section. That would be Jasmine (“just mean”? get it?), and that's bad Karma.
    mobile-and-desktop: >
        “Any application that can be written in JavaScript, will eventually be written in JavaScript.”
        JavaScript is not limited to the browser anymore, and it's only
        a matter of time until your smart toaster burns your bread because NPM is down. 
    other-tools: >
        Other tools that didn't quite fit in any other category.
    opinions: >
        To find out how developers view the current JavaScript ecosystem, 
        we asked them how much they agreed or disagreed with the following opinions.
    demographics: >
        We wanted to learn more about our survey respondents. 
    awards: >
        Join us for the first ever State of JS awards! Can you guess which technologies took gold
        in each category? <span class="note">(Note: we've excluded ES6 from the awards to avoid skewing the data)</span>

award:
    highest_satisfaction:
        heading: Highest Satisfaction
        description: >
            Awarded to the library with the highest percentage of satisfied users.
        comment: >
            With **${tools[0].percentage}%** of users willing to use it again,
            ${tools[0].label} proves it’s not kidding around.
        runner_up: ${tool.label} ${tool.percentage}%  
    highest_interest:
        heading: Highest Interest
        description: >
            Awarded to the technology developers are most interested in learning.
        comment: >
            **${tools[0].percentage}%** of developers who have heard about
            ${tools[0].label} want to learn it.
            That’s some serious interest!
        runner_up: ${tool.label} ${tool.percentage}%
    highest_usage:
        heading: Most Used
        description: >
            Awarded to technology with the largest user base.
        comment: >
            With **${tools[0].count}** users ${tools[0].label}
            is the most used library this year.        
        runner_up: ${tool.label} ${tool.count}
    most_mentioned:        
        heading: Most Mentioned
        description: >
            Awarded to the library mentioned the most in the “other libraries” answer. 
        comment: >
            ${tools[0].label} collected **${tools[0].count}** mentions,
            making it the most submitted freeform answer by far.
        runner_up: ${tool.label} ${tool.count}
    prediction:        
        heading: Prediction Award
        description: >
            Awarded to an up-and-coming technology that might take over… or not?
        comment:
            The Facebook team is two for two with React and GraphQL.
            Will Reason follow the same path?
        runner_up: ${tool.label}
    special:
        heading: Special Award
        description: >
            Awarded to a technology that we just fell in love with this year.
        comment: >
            ${tools[0].label} has become the leading JavaScript text editor, and we can definitely see why!
        runner_up: ${tool.label}
    
quadrant:
    satisfaction_legend: Satisfaction %
    users_legend: Users
    assess: 
        label: Assess
        description: >
            Low usage, high satisfaction.
            Technologies worth keeping an eye on.
    adopt:
        label: Adopt
        description: >
            High usage, high satisfaction. Safe technologies to adopt.
    avoid:  
        label: Avoid
        description: >      
            Low usage, low satisfaction.
            Technologies probably best avoided currently.
    analyze:
        label: Analyze
        description: >
            High usage, low satisfaction.
            Reassess these technologies if you're currently using them.

opinion_scale:
    0: Strongly Disagree
    1: Disagree
    2: Neutral
    3: Agree
    4: Strongly Agree

happiness:
    0: Unhappy
    1: Unhappy
    2: Neutral
    3: Happy
    4: Happy    

salary_range:
    work-for-free: 
        long: I work for free
        short: work for free
    0-10:
        long: $0k-$10k
        short: $0k-$10k
    10-30:
        long: $10k-$30k
        short: $10k-$30k
    30-50:
        long: $30k-$50k
        short: $30k-$50k
    50-100:
        long: $50k-$100k
        short: $50k-$100k
    100-200:
        long: $100k-$200k
        short: $100k-$200k
    more-than-200:
        long: more than $200k
        short: $200k+   

company_size:
    1:
        long: One employee
        short: one
    1-5:
        long: 1 to 5 employees
        short: 1~5
    5-10:
        long: 5 to 10 employees
        short: 5~10
    10-20:
        long: 10 to 20 employees
        short: 10~20
    20-50:
        long: 20 to 50 employees
        short: 20~50
    50-100:
        long: 50 to 100 employees
        short: 50~100
    100-1000:
        long: 100 to 1000 employees
        short: 100~1000
    more-than-1000:
        long: More than 1000 employees
        short: 1000+

years_of_experience:
    less-than-1:
        long: Less than one year
        short: '<1 year'
    1-2:
        long: 1 to 2 years
        short: 1~2 years
    2-5:
        long: 2 to 5 years
        short: 2~5 years
    5-10:
        long: 5 to 10 years
        short: 5~10 years
    10-20:
        long: 10 to 20 years
        short: 10~20 years
    more-than-20:
        long: More than 20 years
        short: '>20 years'
